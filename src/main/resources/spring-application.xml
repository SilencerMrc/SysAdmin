<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:cache="http://www.springframework.org/schema/cache" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
         http://www.springframework.org/schema/context
         http://www.springframework.org/schema/context/spring-context-3.2.xsd
         http://www.springframework.org/schema/aop
         http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
         http://www.springframework.org/schema/tx 
         http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
         http://www.springframework.org/schema/util 
         http://www.springframework.org/schema/util/spring-util.xsd
         http://www.springframework.org/schema/data/jpa
         http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
         http://www.springframework.org/schema/cache   
         http://www.springframework.org/schema/cache/spring-cache.xsd
         http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd">

	<!-- 打开注解 -->
	<mvc:annotation-driven />

	<!-- 启动对@AspectJ注解的支持 -->
	<aop:aspectj-autoproxy />
	<context:annotation-config model="aspectj" />
	<!-- 扫描包 -->
	<context:component-scan base-package="zl.cjy.love.server" />

	<!-- 自动扫描并注入Spring Data JPA -->
	<jpa:repositories base-package="zl.cjy.love.server.repository"
		entity-manager-factory-ref="entityManagerFactory"
		transaction-manager-ref="transactionManager" />
	<!-- 加载JDBC连接信息 -->
	<context:property-placeholder location="classpath:jdbc.properties" />

	<!-- 开启事物 ,使用jdk代理 -->
	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="false" />

	<!-- 配置数据源 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.driverUrl}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 配置连接池的初始值 -->
		<property name="initialSize" value="${jdbc.initialSize}" />
		<!-- 连接池的最大值 -->
		<!-- <property name="maxActive" value="500" /> -->
		<!-- 最大空闲时，当经过一个高峰之后，连接池可以将一些用不到的连接释放，一直减少到maxIdle为止 -->
		<!-- <property name="maxIdle" value="2" /> -->
		<!-- 当最小空闲时，当连接少于minIdle时会自动去申请一些连接 -->
		<property name="minIdle" value="${jdbc.minIdle}" />
		<property name="maxActive" value="${jdbc.maxActive}" />
		<property name="maxWait" value="${jdbc.maxWait}" />
	</bean>

	<!-- 配置entityManagerFactory -->
	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="persistenceUnitName" value="react" />
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="database" value="MYSQL"></property>
				<property name="showSql" value="true"></property>
				<property name="generateDdl" value="true" />
			</bean>
		</property>
		<property name="packagesToScan">
			<list>
				<value>zl.cjy.love.server.entity</value>
			</list>
		</property>
		<property name="jpaPropertyMap" ref="jpaPropertyMap" />
	</bean>

	<util:map id="jpaPropertyMap">
		<entry key="dialect" value="org.hibernate.dialect.MySQLDialect" />
		<entry key="hibernate.ejb.naming_strategy" value="org.hibernate.cfg.ImprovedNamingStrategy" />
		<entry key="hibernate.hbm2ddl.auto" value="none" />
		<entry key="hibernate.cache.region.factory_class" value="org.hibernate.cache.ehcache.EhCacheRegionFactory" />
		<entry key="hibernate.cache.use_second_level_cache" value="true" />
		<entry key="hibernate.cache.use_query_cache" value="true" />
		<entry key="hibernate.generate_statistics" value="false" />
		<entry key="show_sql" value="true" />
		<entry key="hibernate.format_sql" value="false" />
		<entry key="javax.persistence.validation.mode" value="none" />
	</util:map>
	<!-- 系统缓存配置 -->
	<!-- <bean id="sysEhcacheManager"
		class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation" value="classpath:/ehcache.xml" />
	</bean> -->
	<!-- 配置事务管理器 -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

	<!-- 开启AOP监听 -->
	<aop:aspectj-autoproxy proxy-target-class="true" />

	<!-- 配置哪些方法要加入事务控制 -->
	<!-- <tx:advice>：事务通知定义，用于指定事务属性 propagation：指定事务传播行为，默认为Required，使用Propagation.REQUIRED指定； 
		isolation：指定事务隔离级别，默认为“DEFAULT”，使用Isolation.DEFAULT指定； readOnly：指定事务是否只读，默认false表示事务非只读； -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 让所有的方法都加入事务管理，为了提高效率，可以把一些查询之类的方法设置为只读的事务 -->
			<tx:method name="*" propagation="REQUIRED" read-only="true" />
			<!-- 以下方法都是可能设计修改的方法，就无法设置为只读 -->
			<tx:method name="insert*" propagation="REQUIRED" read-only="false" />
			<tx:method name="add*" propagation="REQUIRED" read-only="false" />
			<tx:method name="del*" propagation="REQUIRED" read-only="false" />
			<tx:method name="update*" propagation="REQUIRED" read-only="false" />
			<tx:method name="save*" propagation="REQUIRED" read-only="false" />
			<tx:method name="clear*" propagation="REQUIRED" read-only="false" />
		</tx:attributes>
	</tx:advice>
	<!-- 配置AOP，Spring是通过AOP来进行事务管理的 -->
	<aop:config>
		<!-- 设置pointCut表示哪些方法要加入事务处理 -->
		<aop:pointcut id="allMethods"
			expression="execution(* com.efida.web.*.*.service..*.*(..))" />
		<!-- 通过advisor来确定具体要加入事务控制的方法 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="allMethods" />
	</aop:config>
</beans>